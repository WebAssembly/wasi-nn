;; This WITX version of the wasi-nn API is retained for consistency only. See the `wasi-nn.wit.md`
;; version for the official specification and documentation.

(typename $buffer_size u32)
(typename $nn_errno
  (enum (@witx tag u16)
    $success
    $invalid_argument
    $invalid_encoding
    $missing_memory
    $busy
    $runtime_error
  )
)
(typename $tensor_dimensions (list u32))
(typename $tensor_type
  (enum (@witx tag u8)
    $f16
    $f32
    $u8
    $i32
  )
)
(typename $tensor_data (list u8))
(typename $tensor
  (record
    (field $dimensions $tensor_dimensions)
    (field $type $tensor_type)
    (field $data $tensor_data)
  )
)
(typename $graph_builder (list u8))
(typename $graph_builder_array (list $graph_builder))
(typename $graph (handle))
(typename $graph_encoding
  (enum (@witx tag u8)
    $openvino
    $onnx
    $tensorflow
    $pytorch
    $tensorflowlite
  )
)
(typename $execution_target
  (enum (@witx tag u8)
    $cpu
    $gpu
    $tpu
  )
)
(typename $graph_execution_context (handle))

(module $wasi_ephemeral_nn
  (import "memory" (memory))
  (@interface func (export "load")
    (param $builder $graph_builder_array)
    (param $encoding $graph_encoding)
    (param $target $execution_target)
    (result $error (expected $graph (error $nn_errno)))
  )
    ;;; Load an opaque sequence of bytes to use for inference.
    ;;;
    ;;; This allows runtime implementations to support multiple graph encoding formats. For unsupported graph encodings,
    ;;; return `errno::inval`.
    (@interface func (export "load_by_name")
      ;;; The name of the model to load from the model registry
      (param $model_name (list u8))

      (result $error (expected $graph (error $nn_errno)))
    )

    ;;; Allows registering a model via URI
    ;;;
    ;;; A model registry
    (@interface func (export "register_model_uri")
     ;;; The URI from where the model can be retrieved.
     (param $uri (list u8))
     (param $model_name (list u8))
     ;;; The encoding of the graph.
     (param $encoding $graph_encoding)
     ;;; Where to execute the graph.
     (param $target $execution_target)

     (result $error (expected (error $nn_errno)))
    )

    ;;; Allows registering a model directly via bytes.
    ;;;
    ;;; A model registry
    (@interface func (export "register_model_bytes")
     ;;; The bytes necessary to build the graph.
     (param $model_name (list u8))
     (param $bytes (list (list u8)))
     ;;; The encoding of the graph.
     (param $encoding $graph_encoding)
     ;;; Where to execute the graph.
     (param $target $execution_target)

     (result $error (expected (error $nn_errno)))
    )
  (@interface func (export "init_execution_context")
    (param $graph $graph)
    (result $error (expected $graph_execution_context (error $nn_errno)))
  )
  (@interface func (export "set_input")
    (param $context $graph_execution_context)
    (param $index u32)
    (param $tensor $tensor)
    (result $error (expected (error $nn_errno)))
  )
  (@interface func (export "get_output")
    (param $context $graph_execution_context)
    (param $index u32)
    (param $out_buffer (@witx pointer u8))
    (param $out_buffer_max_size $buffer_size)
    (result $error (expected $buffer_size (error $nn_errno)))
  )
  (@interface func (export "compute")
    (param $context $graph_execution_context)
    (result $error (expected (error $nn_errno)))
  )
)

